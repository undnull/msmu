#!/bin/sh

instance=${1}
server_args=""
server_cwd="${HOME}/${instance}"
server_jar="${HOME}/server.jar"
server_jvm_args=""
instance_dir="${HOME}/.msmu/${instance}"
instance_config="${instance_dir}/instance.conf"

shift 1

if [ ! -f "${instance_config}" ]
then
    >&2 printf "%s: unable to configure %s: instance doesn't exist\n" ${0} ${instance}
    exit 1
fi

# Load variables from the config
. $(realpath ${instance_config}) || exit 1

usage() {
    >&2 printf "usage: %s <instance> [-j:] [-d:] [-s:] [-v:] [-SV] [-h]\n" ${0}
    >&2 printf "options:\n"
    >&2 printf "    -j <path>   : set the server .jar executable path\n"
    >&2 printf "    -d <path>   : set the instance working directory\n"
    >&2 printf "    -s <string> : append to custom server options\n"
    >&2 printf "    -v <string> : append to custom JVM options\n"
    >&2 printf "    -S          : clear custom server options\n"
    >&2 printf "    -V          : clear custom JVM options\n"
    >&2 printf "    -h          : print this message and exit\n"
}

while getopts "j:d:s:v:SVh" OPT
do
    case "${OPT}" in
        j) server_jar="${OPTARG}";;
        d) server_cwd="${OPTARG}";;
        s) server_args="${OPTARG} ${server_args}";;
        v) server_jvm_args="${OPTARG} ${server_jvm_args}";;
        S) server_args="";;
        V) server_jvm_args="";;
        h) usage; exit 0;;
        ?) usage; exit 1;;
    esac
done

server_cwd=$(realpath ${server_cwd})
server_jar=$(realpath ${server_jar})

mkdir -p ${instance_dir}
truncate -s 0 ${instance_config}
printf "# updated automatically, do not change\n"           >> "${instance_config}"
printf "server_args=\"%s\"\n"       "${server_args}"        >> "${instance_config}"
printf "server_cwd=\"%s\"\n"        "${server_cwd}"         >> "${instance_config}"
printf "server_jar=\"%s\"\n"        "${server_jar}"         >> "${instance_config}"
printf "server_jvm_args=\"%s\"\n"   "${server_jvm_args}"    >> "${instance_config}"

exit 0
