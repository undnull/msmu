#!/bin/sh

instance=${1}
server_args=""
server_cwd="${HOME}/${instance}"
server_jar="${HOME}/server.jar"
server_jvm_args=""
instance_dir="${HOME}/.msmu/${instance}"
instance_config="${instance_dir}/instance.conf"
instance_start_sh="${instance_dir}/start.sh"
instance_stop_sh="${instance_dir}/stop.sh"

shift 1

if [ -f "${instance_config}" ]
then
    >&2 printf "%s: unable to create %s: instance exists\n" ${0} ${instance}
    exit 1
fi

usage() {
    >&2 printf "usage: %s <instance> [-j:] [-d:] [-h]\n" ${0}
    >&2 printf "options:\n"
    >&2 printf "    -j <path>   : set the server .jar executable path\n"
    >&2 printf "    -d <path>   : set the instance working directory\n"
    >&2 printf "    -h          : print this message and exit\n"
}

while getopts "j:d:h" OPT
do
    case "${OPT}" in
        j) server_jar="${OPTARG}";;
        d) server_cwd="${OPTARG}";;
        h) usage; exit 0;;
        ?) usage; exit 1;;
    esac
done

server_cwd=$(realpath ${server_cwd})
server_jar=$(realpath ${server_jar})

mkdir -p ${instance_dir}
truncate -s 0 ${instance_config}
truncate -s 0 ${instance_start_sh}
truncate -s 0 ${instance_stop_sh}
printf "# updated automatically, do not change\n"           >> "${instance_config}"
printf "server_args=\"%s\"\n"       "${server_args}"        >> "${instance_config}"
printf "server_cwd=\"%s\"\n"        "${server_cwd}"         >> "${instance_config}"
printf "server_jar=\"%s\"\n"        "${server_jar}"         >> "${instance_config}"
printf "server_jvm_args=\"%s\"\n"   "${server_jvm_args}"    >> "${instance_config}"

exit 0
